Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 000000597F34BBF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 000000597F34BBC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "Hello Triangle"
            applicationVersion:             uint32_t = 4194304
            pEngineName:                    const char* = "No Engine"
            engineVersion:                  uint32_t = 4194304
            apiVersion:                     uint32_t = 4198400
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 2
        ppEnabledExtensionNames:        const char* const* = 000001F3B83CB950
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001F3B813C4D0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3B813C4D0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3B813C4D0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001F3BB62A270
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001F3BB5EC920

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5EC920
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000000597F34BE20:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000000597F34BE24
            memoryTypes[0]:                 VkMemoryType = 000000597F34BE24:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000000597F34BE2C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 000000597F34BE34:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 000000597F34BE3C:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000000597F34BE44:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000000597F34BE4C:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000000597F34BF28
            memoryHeaps[0]:                 VkMemoryHeap = 000000597F34BF28:
                size:                           VkDeviceSize = 8406433792
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000000597F34BF38:
                size:                           VkDeviceSize = 17081991168
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 000000597F34BBF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 000000597F34BBC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "Hello Triangle"
            applicationVersion:             uint32_t = 4194304
            pEngineName:                    const char* = "No Engine"
            engineVersion:                  uint32_t = 4194304
            apiVersion:                     uint32_t = 4198400
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 2
        ppEnabledExtensionNames:        const char* const* = 000001F3B83CB950
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001F3BB4EF390

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001F3BB601770
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001F3BB5AAC50

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000000597F34BE20:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000000597F34BE24
            memoryTypes[0]:                 VkMemoryType = 000000597F34BE24:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000000597F34BE2C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 000000597F34BE34:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 000000597F34BE3C:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000000597F34BE44:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000000597F34BE4C:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000000597F34BF28
            memoryHeaps[0]:                 VkMemoryHeap = 000000597F34BF28:
                size:                           VkDeviceSize = 8406433792
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000000597F34BF38:
                size:                           VkDeviceSize = 17081991168
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 000000597F34FB10:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)
        pNext:                          const void* = NULL
        flags:                          VkWin32SurfaceCreateFlagsKHR = 0
        hinstance:                      HINSTANCE = 00007FF61A2C0000
        hwnd:                           HWND = 0000000000AD0A88
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = 000001F3BB5F51E0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001F3BB601630
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001F3BB5AAC50

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pProperties:                    VkPhysicalDeviceProperties* = 000001F3BB9F97A0:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001F3BB9F98B4
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000001F3BB9F98C8:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001F3BB9F99A4
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000001F3BB9F99B4
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001F3BB9F99E0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000001F3BB9F99E8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001F3BB9F9A84
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001F3BB9F9A8C
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001F3BB9F9AC0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001F3BB4EF390
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001F3BB6015B0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001F3BB5AAC50

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pProperties:                    VkPhysicalDeviceProperties* = 000001F3BB4F07E0:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001F3BB4F08F4
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000001F3BB4F0908:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001F3BB4F09E4
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000001F3BB4F09F4
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001F3BB4F0A20
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000001F3BB4F0A28
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001F3BB4F0AC4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001F3BB4F0ACC
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001F3BB4F0B00:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pFeatures:                      VkPhysicalDeviceFeatures* = 000001F3BB4F0B18:
        robustBufferAccess:             VkBool32 = 1
        fullDrawIndexUint32:            VkBool32 = 1
        imageCubeArray:                 VkBool32 = 1
        independentBlend:               VkBool32 = 1
        geometryShader:                 VkBool32 = 1
        tessellationShader:             VkBool32 = 1
        sampleRateShading:              VkBool32 = 1
        dualSrcBlend:                   VkBool32 = 1
        logicOp:                        VkBool32 = 1
        multiDrawIndirect:              VkBool32 = 1
        drawIndirectFirstInstance:      VkBool32 = 1
        depthClamp:                     VkBool32 = 1
        depthBiasClamp:                 VkBool32 = 1
        fillModeNonSolid:               VkBool32 = 1
        depthBounds:                    VkBool32 = 1
        wideLines:                      VkBool32 = 1
        largePoints:                    VkBool32 = 1
        alphaToOne:                     VkBool32 = 1
        multiViewport:                  VkBool32 = 1
        samplerAnisotropy:              VkBool32 = 1
        textureCompressionETC2:         VkBool32 = 0
        textureCompressionASTC_LDR:     VkBool32 = 0
        textureCompressionBC:           VkBool32 = 1
        occlusionQueryPrecise:          VkBool32 = 1
        pipelineStatisticsQuery:        VkBool32 = 1
        vertexPipelineStoresAndAtomics: VkBool32 = 1
        fragmentStoresAndAtomics:       VkBool32 = 1
        shaderTessellationAndGeometryPointSize: VkBool32 = 1
        shaderImageGatherExtended:      VkBool32 = 1
        shaderStorageImageExtendedFormats: VkBool32 = 1
        shaderStorageImageMultisample:  VkBool32 = 1
        shaderStorageImageReadWithoutFormat: VkBool32 = 1
        shaderStorageImageWriteWithoutFormat: VkBool32 = 1
        shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
        shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
        shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
        shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
        shaderClipDistance:             VkBool32 = 1
        shaderCullDistance:             VkBool32 = 1
        shaderFloat64:                  VkBool32 = 1
        shaderInt64:                    VkBool32 = 1
        shaderInt16:                    VkBool32 = 1
        shaderResourceResidency:        VkBool32 = 1
        shaderResourceMinLod:           VkBool32 = 1
        sparseBinding:                  VkBool32 = 1
        sparseResidencyBuffer:          VkBool32 = 1
        sparseResidencyImage2D:         VkBool32 = 1
        sparseResidencyImage3D:         VkBool32 = 1
        sparseResidency2Samples:        VkBool32 = 1
        sparseResidency4Samples:        VkBool32 = 1
        sparseResidency8Samples:        VkBool32 = 1
        sparseResidency16Samples:       VkBool32 = 1
        sparseResidencyAliased:         VkBool32 = 1
        variableMultisampleRate:        VkBool32 = 1
        inheritedQueries:               VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001F3BB726C70
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001F3BB726C70:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB726C7C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001F3BB726C88:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB726C94:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001F3BB726CA0:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB726CAC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001F3BB726CB8:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB726CC4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001F3BB726CD0:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB726CDC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001F3BB726CE8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB726CF4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000597F34FA40:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000597F34FA48:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 000000597F34FA50:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 000000597F34FA58:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001F3BB4DA550
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001F3BB4DA550:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001F3BB4DA558:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001F3BB4DA560:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 000001F3BB4DA568:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 000001F3BB4DA570:
            format:                         VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT (1000104002)
        pSurfaceFormats[5]:             VkSurfaceFormatKHR = 000001F3BB4DA578:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_HDR10_ST2084_EXT (1000104008)
        pSurfaceFormats[6]:             VkSurfaceFormatKHR = 000001F3BB4DA580:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 000001F3BB74F6E0
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pProperties:                    VkPhysicalDeviceProperties* = 000000597F34F810:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000597F34F924
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000000597F34F938:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000597F34FA14
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000000597F34FA24
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000597F34FA50
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000597F34FA58
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000597F34FAF4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000000597F34FAFC
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000597F34FB30:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001F3BB7757D0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001F3BB7757D0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB7757DC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001F3BB7757E8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB7757F4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001F3BB775800:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB77580C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001F3BB775818:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB775824:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001F3BB775830:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB77583C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001F3BB775848:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB775854:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pCreateInfo:                    const VkDeviceCreateInfo* = 000000597F34F810:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 000001F3BB5AC300
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 000001F3BB5AC300:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 000000597F34FA70
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 1
        ppEnabledExtensionNames:        const char* const* = 000001F3B8314660
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 000000597F34FAD0:
            robustBufferAccess:             VkBool32 = 0
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 0
            independentBlend:               VkBool32 = 0
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 0
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 0
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001F3BDB98770

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 000000597F34EC50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 000000597F34EC78:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 000000597F34ECB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 000000597F34ECC0:
            maxExtent:                      VkExtent3D = 000000597F34ECC0:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 000000597F34EC90:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 000000597F34ECA0:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000000597F34EB70
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000000597F34EB70:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34EB7C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000000597F34EB88:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34EB94:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000000597F34EBA0:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34EBAC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000000597F34EBB8:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000000597F34EBC4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000000597F34EBD0:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000000597F34EBDC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000000597F34EBE8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34EBF4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001F3BDB98770
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 000000597F34EDB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 000000597F34EDD8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 000000597F34EE10:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 000000597F34EE20:
            maxExtent:                      VkExtent3D = 000000597F34EE20:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 000000597F34EDF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 000000597F34EE00:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000000597F34ECD0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000000597F34ECD0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34ECDC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000000597F34ECE8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34ECF4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000000597F34ED00:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34ED0C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000000597F34ED18:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000000597F34ED24:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000000597F34ED30:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000000597F34ED3C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000000597F34ED48:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000000597F34ED54:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001F3BDB98770
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001F3BB7759B0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001F3BB7759B0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB7759BC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001F3BB7759C8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB7759D4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001F3BB7759E0:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB7759EC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001F3BB7759F8:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB775A04:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001F3BB775A10:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB775A1C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001F3BB775A28:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB775A34:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001F3BDB98770
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001F3BDB98770
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001F3BDB98770
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pProperties:                    VkPhysicalDeviceProperties* = 000001F3BE0DA190:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001F3BE0DA2A4
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000001F3BE0DA2B8:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001F3BE0DA394
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000001F3BE0DA3A4
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001F3BE0DA3D0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000001F3BE0DA3D8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001F3BE0DA474
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001F3BE0DA47C
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001F3BE0DA4B0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000001F3BE0DA4C8:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000001F3BE0DA4CC
            memoryTypes[0]:                 VkMemoryType = 000001F3BE0DA4CC:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000001F3BE0DA4D4:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 000001F3BE0DA4DC:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 000001F3BE0DA4E4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000001F3BE0DA4EC:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000001F3BE0DA4F4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000001F3BE0DA5D0
            memoryHeaps[0]:                 VkMemoryHeap = 000001F3BE0DA5D0:
                size:                           VkDeviceSize = 8406433792
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000001F3BE0DA5E0:
                size:                           VkDeviceSize = 17081991168
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties2* = 000000597F34F780:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 (1000059006)
        pNext:                          void* = VkPhysicalDeviceMemoryBudgetPropertiesEXT
        memoryProperties:               VkPhysicalDeviceMemoryProperties = 000000597F34F790:
            memoryTypeCount:                uint32_t = 6
            memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000000597F34F794
                memoryTypes[0]:                 VkMemoryType = 000000597F34F794:
                    propertyFlags:                  VkMemoryPropertyFlags = 0
                    heapIndex:                      uint32_t = 1
                memoryTypes[1]:                 VkMemoryType = 000000597F34F79C:
                    propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                    heapIndex:                      uint32_t = 0
                memoryTypes[2]:                 VkMemoryType = 000000597F34F7A4:
                    propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                    heapIndex:                      uint32_t = 0
                memoryTypes[3]:                 VkMemoryType = 000000597F34F7AC:
                    propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                    heapIndex:                      uint32_t = 1
                memoryTypes[4]:                 VkMemoryType = 000000597F34F7B4:
                    propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                    heapIndex:                      uint32_t = 1
                memoryTypes[5]:                 VkMemoryType = 000000597F34F7BC:
                    propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                    heapIndex:                      uint32_t = 0
            memoryHeapCount:                uint32_t = 2
            memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000000597F34F898
                memoryHeaps[0]:                 VkMemoryHeap = 000000597F34F898:
                    size:                           VkDeviceSize = 8406433792
                    flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
                memoryHeaps[1]:                 VkMemoryHeap = 000000597F34F8A8:
                    size:                           VkDeviceSize = 17081991168
                    flags:                          VkMemoryHeapFlags = 0
        pNext:                          VkPhysicalDeviceMemoryBudgetPropertiesEXT = 000000597F34F670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT (1000237000)
            pNext:                          void* = NULL
            heapBudget:                     VkDeviceSize[VK_MAX_MEMORY_HEAPS] = 000000597F34F680
                heapBudget[0]:                  VkDeviceSize = 7601127424
                heapBudget[1]:                  VkDeviceSize = 16276686848
            heapUsage:                      VkDeviceSize[VK_MAX_MEMORY_HEAPS] = 000000597F34F700
                heapUsage[0]:                   VkDeviceSize = 3264512
                heapUsage[1]:                   VkDeviceSize = 11612160

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000597F34FB30:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000597F34FB38:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 000000597F34FB40:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 000000597F34FB48:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001F3BDB891F0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001F3BDB891F0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001F3BDB891F8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001F3BDB89200:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 000001F3BDB89208:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 000001F3BDB89210:
            format:                         VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT (1000104002)
        pSurfaceFormats[5]:             VkSurfaceFormatKHR = 000001F3BDB89218:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_HDR10_ST2084_EXT (1000104008)
        pSurfaceFormats[6]:             VkSurfaceFormatKHR = 000001F3BDB89220:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 000001F3BDD89FB0
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001F3BB776130
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001F3BB776130:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB77613C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001F3BB776148:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB776154:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001F3BB776160:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB77616C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001F3BB776178:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB776184:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001F3BB776190:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3BB77619C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001F3BB7761A8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3BB7761B4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 000000597F34F4F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = 000001F3BB5F51E0
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 000000597F34F51C:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = 0000000000000000
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = 000001F3BB7BB8C0

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001F3BB5A9698
        pSwapchainImages[0]:            VkImage = 000001F3BE0FAF30
        pSwapchainImages[1]:            VkImage = 000001F3BE0FB3C0
        pSwapchainImages[2]:            VkImage = 000001F3BE0FB850

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001F3BB5A96C8
        pSwapchainImages[0]:            VkImage = 000001F3BE0FAF30
        pSwapchainImages[1]:            VkImage = 000001F3BE0FB3C0
        pSwapchainImages[2]:            VkImage = 000001F3BE0FB850

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001F3BDD8ABF0
        pSwapchainImages[0]:            VkImage = 000001F3BE0FAF30
        pSwapchainImages[1]:            VkImage = 000001F3BE0FB3C0
        pSwapchainImages[2]:            VkImage = 000001F3BE0FB850

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000597F34FB50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001F3BE0FAF30
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000597F34FB78:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000597F34FB88:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001F3BE09DC40

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000597F34FB50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001F3BE0FB3C0
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000597F34FB78:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000597F34FB88:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001F3BE09CDD0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000597F34FB50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001F3BE0FB850
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000597F34FB78:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000597F34FB88:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001F3BE09DD90

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 000000597F34F910:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkRenderPassCreateInfo* = 000000597F34FA70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 3
        pAttachments:                   const VkAttachmentDescription* = 000000597F34FB40
            pAttachments[0]:                const VkAttachmentDescription = 000000597F34FB40:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                samples:                        VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            pAttachments[1]:                const VkAttachmentDescription = 000000597F34FB64:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
                samples:                        VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            pAttachments[2]:                const VkAttachmentDescription = 000000597F34FB88:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 000000597F34FAB0
            pSubpasses[0]:                  const VkSubpassDescription = 000000597F34FAB0:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000000597F34FB00
                    pColorAttachments[0]:           const VkAttachmentReference = 000000597F34FB00:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000000597F34FB10
                    pResolveAttachments[0]:         const VkAttachmentReference = 000000597F34FB10:
                        attachment:                     uint32_t = 2
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pDepthStencilAttachment:        const VkAttachmentReference* = 000000597F34FB08:
                    attachment:                     uint32_t = 1
                    layout:                         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 1
        pDependencies:                  const VkSubpassDependency* = 000000597F34FB18
            pDependencies[0]:               const VkSubpassDependency = 000000597F34FB18:
                srcSubpass:                     uint32_t = 4294967295
                dstSubpass:                     uint32_t = 0
                srcStageMask:                   VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                dstStageMask:                   VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
                dstAccessMask:                  VkAccessFlags = 1280 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
                dependencyFlags:                VkDependencyFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 000001F3B83DD600

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 000000597F34FB68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 2
        pBindings:                      const VkDescriptorSetLayoutBinding* = 000000597F34FB88
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000000597F34FB88:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 000000597F34FBA0:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 000001F3BE0DD890

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 000000597F34F700:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1840
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 000001F3BDB908B0

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 000000597F34F700:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 728
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 000001F3BDB91870

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 000000597F34F840:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 000000597F34FC60
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 000001F3BE0DD890
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 000001F3BE0FFA90

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 000000597F34F8F0
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 000000597F34F8F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 000000597F34FB40
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 000000597F34FB40:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = 000001F3BDB908B0
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 000000597F34FB70:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = 000001F3BDB91870
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 000000597F34F870:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 1
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 000000597F34F9D0
                    pVertexBindingDescriptions[0]:  const VkVertexInputBindingDescription = 000000597F34F9D0:
                        binding:                        uint32_t = 0
                        stride:                         uint32_t = 32
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 000000597F34FB10
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 000000597F34FB10:
                        location:                       uint32_t = 0
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 000000597F34FB20:
                        location:                       uint32_t = 1
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 000000597F34FB30:
                        location:                       uint32_t = 2
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                         uint32_t = 24
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 000000597F34FA50:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 000000597F34F8A0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 000000597F34F9F0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 2 (VK_CULL_MODE_BACK_BIT)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 000000597F34F810:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 8 (VK_SAMPLE_COUNT_8_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 1
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 000000597F34FAA0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 1
                depthWriteEnable:               VkBool32 = 1
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_LESS (1)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 000000597F34FAC8:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 000000597F34FAE4:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 1
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 000000597F34F980:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 000000597F34FA30
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 000000597F34FA30:
                        blendEnable:                    VkBool32 = 1
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA (6)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA (7)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 000000597F34F9A8
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 000000597F34F8D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 2
                pDynamicStates:                 const VkDynamicState* = 000001F3B8314670
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
            layout:                         VkPipelineLayout = 000001F3BE0FFA90
            renderPass:                     VkRenderPass = 000001F3B83DD600
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = -1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000000597F34FC70
        pPipelines[0]:                  VkPipeline = 000001F3BE107B50

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001F3BDB98770
    shaderModule:                   VkShaderModule = 000001F3BDB908B0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001F3BDB98770
    shaderModule:                   VkShaderModule = 000001F3BDB91870
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001F3B835DC30
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001F3B835DC30:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3B835DC3C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001F3B835DC48:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3B835DC54:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001F3B835DC60:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3B835DC6C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001F3B835DC78:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3B835DC84:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001F3B835DC90:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001F3B835DC9C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001F3B835DCA8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001F3B835DCB4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001F3BB5F51E0
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 000000597F34FB98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 000001F3BE131160

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageCreateInfo* = 000000597F34FAD0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        extent:                         VkExtent3D = 000000597F34FAEC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 80 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001F3BE1314E0

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 000000597F34F8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = 000001F3BE1314E0
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F920:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F930:
            size:                           VkDeviceSize = 2048000
            alignment:                      VkDeviceSize = 1024
            memoryTypeBits:                 uint32_t = 3
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F908:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000597F34F570:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 33554432
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001F3BE131B60

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    image:                          VkImage = 000001F3BE1314E0
    memory:                         VkDeviceMemory = 000001F3BE131B60
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000597F34FAF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001F3BE1314E0
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 000000597F34FB18:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000597F34FB28:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001F3BE09D070

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 000000597F34FAA0:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageCreateInfo* = 000000597F34FAD0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:                         VkExtent3D = 000000597F34FAEC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001F3BE120E20

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 000000597F34F8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = 000001F3BE120E20
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F920:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F930:
            size:                           VkDeviceSize = 2048000
            alignment:                      VkDeviceSize = 1024
            memoryTypeBits:                 uint32_t = 3
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F908:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    image:                          VkImage = 000001F3BE120E20
    memory:                         VkDeviceMemory = 000001F3BE131B60
    memoryOffset:                   VkDeviceSize = 2048000

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000597F34FAF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001F3BE120E20
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 000000597F34FB18:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000597F34FB28:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001F3BE09D9A0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34FA08:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000597F34FA00
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34FA28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 256 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FAD0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FAD0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 1536 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE120E20
            subresourceRange:               VkImageSubresourceRange = 000000597F34FB00:
                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34F9F0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34F9F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000597F34F9E0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001F3BDB98770
    commandPool:                    VkCommandPool = 000001F3BE131160
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 000000597F34F9E0
        pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkFramebufferCreateInfo* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001F3B83DD600
        attachmentCount:                uint32_t = 3
        pAttachments:                   const VkImageView* = 000000597F34FB80
            pAttachments[0]:                const VkImageView = 000001F3BE09D070
            pAttachments[1]:                const VkImageView = 000001F3BE09D9A0
            pAttachments[2]:                const VkImageView = 000001F3BE09DC40
        width:                          uint32_t = 800
        height:                         uint32_t = 600
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001F3BDB90430

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkFramebufferCreateInfo* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001F3B83DD600
        attachmentCount:                uint32_t = 3
        pAttachments:                   const VkImageView* = 000000597F34FB80
            pAttachments[0]:                const VkImageView = 000001F3BE09D070
            pAttachments[1]:                const VkImageView = 000001F3BE09D9A0
            pAttachments[2]:                const VkImageView = 000001F3BE09CDD0
        width:                          uint32_t = 800
        height:                         uint32_t = 600
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001F3BDB91AB0

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkFramebufferCreateInfo* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001F3B83DD600
        attachmentCount:                uint32_t = 3
        pAttachments:                   const VkImageView* = 000000597F34FB80
            pAttachments[0]:                const VkImageView = 000001F3BE09D070
            pAttachments[1]:                const VkImageView = 000001F3BE09D9A0
            pAttachments[2]:                const VkImageView = 000001F3BE09DD90
        width:                          uint32_t = 800
        height:                         uint32_t = 600
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001F3BDB911B0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FAC8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 154448
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3BDE56E10

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3BDE56E10
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F920:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F930:
            size:                           VkDeviceSize = 154448
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F908:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000597F34F570:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 33554432
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001F3BE120930

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001F3C2590000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageCreateInfo* = 000000597F34FA90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        extent:                         VkExtent3D = 000000597F34FAAC:
            width:                          uint32_t = 196
            height:                         uint32_t = 197
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 8
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 7 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001F3BE0FEF60

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 000000597F34F8B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = 000001F3BE0FEF60
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F8E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F8F0:
            size:                           VkDeviceSize = 293376
            alignment:                      VkDeviceSize = 1024
            memoryTypeBits:                 uint32_t = 3
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F8C8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    image:                          VkImage = 000001F3BE0FEF60
    memory:                         VkDeviceMemory = 000001F3BE131B60
    memoryOffset:                   VkDeviceSize = 4096000

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34F9C8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000597F34F9C0
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA90
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA90:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FAC0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 8
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34F9B0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34F9B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000597F34F9A0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001F3BDB98770
    commandPool:                    VkCommandPool = 000001F3BE131160
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 000000597F34F9A0
        pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34FA28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000597F34FA20
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34FA48:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcBuffer:                      VkBuffer = 000001F3BDE56E10
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 000000597F34FAB0
        pRegions[0]:                    const VkBufferImageCopy = 000000597F34FAB0:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 0
            bufferImageHeight:              uint32_t = 0
            imageSubresource:               VkImageSubresourceLayers = 000000597F34FAC0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 000000597F34FAD0:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 000000597F34FADC:
                width:                          uint32_t = 196
                height:                         uint32_t = 197
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FA10
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FA10:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000597F34FA00
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001F3BDB98770
    commandPool:                    VkCommandPool = 000001F3BE131160
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 000000597F34FA00
        pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties:              VkFormatProperties* = 000000597F34FAC0:
        linearTilingFeatures:           VkFormatFeatureFlags = 121857 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34F958:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000597F34F950
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F978:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 196
                    y:                              int32_t = 197
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 98
                    y:                              int32_t = 98
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 1
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 98
                    y:                              int32_t = 98
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 2
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 49
                    y:                              int32_t = 49
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 1
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 2
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 2
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 49
                    y:                              int32_t = 49
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 3
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 24
                    y:                              int32_t = 24
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 2
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 3
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 3
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 24
                    y:                              int32_t = 24
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 4
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 12
                    y:                              int32_t = 12
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 3
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 4
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 4
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 12
                    y:                              int32_t = 12
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 5
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 6
                    y:                              int32_t = 6
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 4
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 5
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 5
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 6
                    y:                              int32_t = 6
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 6
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 3
                    y:                              int32_t = 3
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 5
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 6
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcImage:                       VkImage = 000001F3BE0FEF60
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001F3BE0FEF60
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 000000597F34FA70
        pRegions[0]:                    const VkImageBlit = 000000597F34FA70:
            srcSubresource:                 VkImageSubresourceLayers = 000000597F34FA70:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 6
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 000000597F34FA80
                srcOffsets[0]:                  VkOffset3D = 000000597F34FA80:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 000000597F34FA8C:
                    x:                              int32_t = 3
                    y:                              int32_t = 3
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 000000597F34FA98:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 7
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 000000597F34FAA8
                dstOffsets[0]:                  VkOffset3D = 000000597F34FAA8:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 000000597F34FAB4:
                    x:                              int32_t = 1
                    y:                              int32_t = 1
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 6
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000597F34FA20
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000597F34FA20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001F3BE0FEF60
            subresourceRange:               VkImageSubresourceRange = 000000597F34FA50:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 7
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34F940
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34F940:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000597F34F930
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001F3BDB98770
    commandPool:                    VkCommandPool = 000001F3BE131160
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 000000597F34F930
        pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000597F34FB20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001F3BE0FEF60
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        components:                     VkComponentMapping = 000000597F34FB48:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000597F34FB58:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 8
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001F3BE09E2D0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001F3BB5AAC50
    pProperties:                    VkPhysicalDeviceProperties* = 000000597F34F870:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000597F34F984
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000000597F34F998:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000597F34FA74
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000000597F34FA84
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000597F34FAB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000597F34FAB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000597F34FB54
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000000597F34FB5C
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000597F34FB90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkSamplerCreateInfo* = 000000597F34F820:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:                          const void* = NULL
        flags:                          VkSamplerCreateFlags = 0
        magFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        minFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        mipLodBias:                     float = 0
        anisotropyEnable:               VkBool32 = 1
        maxAnisotropy:                  float = 16
        compareEnable:                  VkBool32 = 0
        compareOp:                      VkCompareOp = VK_COMPARE_OP_ALWAYS (7)
        minLod:                         float = 0
        maxLod:                         float = 8
        borderColor:                    VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates:        VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSampler:                       VkSampler* = 000001F3BE1CCF10

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FB18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 17792
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3BDE56E10

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F940:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3BDE56E10
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F970:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F980:
            size:                           VkDeviceSize = 17792
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F958:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001F3C2590000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FB18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 17792
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3B8369F40

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F940:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3B8369F40
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F970:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F980:
            size:                           VkDeviceSize = 17792
            alignment:                      VkDeviceSize = 16
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F958:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3B8369F40
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 17792

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34FA98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000597F34FA90
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34FAB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcBuffer:                      VkBuffer = 000001F3BDE56E10
    dstBuffer:                      VkBuffer = 000001F3B8369F40
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 000000597F34FB20
        pRegions[0]:                    const VkBufferCopy = 000000597F34FB20:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 17792

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FA80
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000597F34FA70
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001F3BDB98770
    commandPool:                    VkCommandPool = 000001F3BE131160
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 000000597F34FA70
        pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FB18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 11616
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3BDE56E10

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F940:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3BDE56E10
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F970:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F980:
            size:                           VkDeviceSize = 11616
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F958:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001F3C2590000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FB18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 11616
        usage:                          VkBufferUsageFlags = 66 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3BE168EB0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F940:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3BE168EB0
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F970:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F980:
            size:                           VkDeviceSize = 11616
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F958:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BE168EB0
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 35584

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34FA98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000000597F34FA90
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34FAB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    srcBuffer:                      VkBuffer = 000001F3BDE56E10
    dstBuffer:                      VkBuffer = 000001F3BE168EB0
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 000000597F34FB20
        pRegions[0]:                    const VkBufferCopy = 000000597F34FB20:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 11616

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FA80
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000597F34FA70
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001F3BDB98770
    commandPool:                    VkCommandPool = 000001F3BE131160
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 000000597F34FA70
        pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FB38:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 192
        usage:                          VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3BDE56E10

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F960:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3BDE56E10
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F990:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F9A0:
            size:                           VkDeviceSize = 192
            alignment:                      VkDeviceSize = 64
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F978:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BDE56E10
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkBufferCreateInfo* = 000000597F34FB38:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 192
        usage:                          VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001F3BE192290

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001F3BDB98770
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 000000597F34F960:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001F3BE192290
    pMemoryRequirements:            VkMemoryRequirements2* = 000000597F34F990:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 000000597F34F9A0:
            size:                           VkDeviceSize = 192
            alignment:                      VkDeviceSize = 64
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 000000597F34F978:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    buffer:                         VkBuffer = 000001F3BE192290
    memory:                         VkDeviceMemory = 000001F3BE120930
    memoryOffset:                   VkDeviceSize = 192

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 000000597F34FB78:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 0
        maxSets:                        uint32_t = 2
        poolSizeCount:                  uint32_t = 2
        pPoolSizes:                     const VkDescriptorPoolSize* = 000000597F34FBA0
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 000000597F34FBA0:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 2
            pPoolSizes[1]:                  const VkDescriptorPoolSize = 000000597F34FBA8:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 000001F3BE0FF3F0

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 000000597F34FAD0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 000001F3BE0FF3F0
        descriptorSetCount:             uint32_t = 2
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001F3BDD8ADB0
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 000001F3BE0DD890
            pSetLayouts[1]:                 const VkDescriptorSetLayout = 000001F3BE0DD890
    pDescriptorSets:                VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             VkDescriptorSet = 000001F3BE1C8940
        pDescriptorSets[1]:             VkDescriptorSet = 000001F3BE1C8CB8

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001F3BDB98770
    descriptorWriteCount:           uint32_t = 2
    pDescriptorWrites:              const VkWriteDescriptorSet* = 000000597F34FB10
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000000597F34FB10:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001F3BE1C8940
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 000000597F34FAB8
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000000597F34FAB8:
                    buffer:                         VkBuffer = 000001F3BDE56E10
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 192
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000000597F34FB50:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001F3BE1C8940
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo:                     const VkDescriptorImageInfo* = 000000597F34FAA0
                pImageInfo[0]:                  const VkDescriptorImageInfo = 000000597F34FAA0:
                    sampler:                        VkSampler = 000001F3BE1CCF10
                    imageView:                      VkImageView = 000001F3BE09E2D0
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001F3BDB98770
    descriptorWriteCount:           uint32_t = 2
    pDescriptorWrites:              const VkWriteDescriptorSet* = 000000597F34FB10
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000000597F34FB10:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001F3BE1C8CB8
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 000000597F34FAB8
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000000597F34FAB8:
                    buffer:                         VkBuffer = 000001F3BE192290
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 192
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000000597F34FB50:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001F3BE1C8CB8
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo:                     const VkDescriptorImageInfo* = 000000597F34FAA0
                pImageInfo[0]:                  const VkDescriptorImageInfo = 000000597F34FAA0:
                    sampler:                        VkSampler = 000001F3BE1CCF10
                    imageView:                      VkImageView = 000001F3BE09E2D0
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000597F34FB98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001F3BE131160
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 2
    pCommandBuffers:                VkCommandBuffer* = 000001F3BDD8AC10
        pCommandBuffers[0]:             VkCommandBuffer = 000001F3BE169080
        pCommandBuffers[1]:             VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000597F34FBA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001F3BDB91E10

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000597F34FBA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001F3BDB90AF0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkFenceCreateInfo* = 000000597F34FBC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001F3BE1CF8B0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000597F34FBA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001F3BDB91870

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000597F34FBA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001F3BDB90C10

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    pCreateInfo:                    const VkFenceCreateInfo* = 000000597F34FBC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001F3BE1CFF10

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001F3C2590000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB90430
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 0:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 1:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 1:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 1:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001F3C2590000

Thread 0, Frame 1:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930

Thread 0, Frame 1:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 1:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 1:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 1:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB91AB0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 1:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 1:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 1:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 1:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 1:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 1:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 1:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 1:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 1:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 1:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 1:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 2:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 2:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 2:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    memory:                         VkDeviceMemory = 000001F3BE120930
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001F3C2590000

Thread 0, Frame 2:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 2:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 2:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 2:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB911B0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 2:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 2:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 2:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 2:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 2:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 2:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 2:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 2:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 2:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 2:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 2:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 3:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 3:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 3:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 3:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 3:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 3:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB90430
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 3:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 3:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 3:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 3:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 3:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 3:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 3:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 3:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 3:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 3:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 3:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 4:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 4:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 4:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 4:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 4:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 4:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB91AB0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 4:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 4:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 4:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 4:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 4:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 4:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 4:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 4:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 4:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 4:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 4:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 5:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 5:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 5:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 5:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 5:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 5:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB911B0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 5:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 5:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 5:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 5:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 5:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 5:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 5:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 5:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 5:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 5:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 5:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 6:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 6:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 6:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 6:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 6:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 6:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB90430
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 6:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 6:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 6:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 6:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 6:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 6:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 6:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 6:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 6:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 6:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 6:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 7:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 7:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 7:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 7:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 7:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 7:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB91AB0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 7:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 7:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 7:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 7:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 7:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 7:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 7:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 7:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 7:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 7:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 7:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 8:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 8:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 8:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 8:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 8:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 8:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB911B0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 8:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 8:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 8:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 8:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 8:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 8:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 8:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 8:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 8:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 8:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 8:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 9:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 9:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 9:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 9:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 9:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 9:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB90430
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 9:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 9:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 9:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 9:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 9:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 9:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 9:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 9:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 9:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 9:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 9:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 10:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 10:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 10:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 10:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 10:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 10:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB91AB0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 10:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 10:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 10:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 10:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 10:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 10:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 10:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 10:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 10:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 10:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 10:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 11:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 11:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 11:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 11:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 11:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 11:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB911B0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 11:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 11:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 11:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 11:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 11:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 11:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 11:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 11:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 11:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 11:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 11:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 12:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 12:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 12:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 12:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 12:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 12:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB90430
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 12:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 12:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 12:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 12:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 12:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 12:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 12:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 12:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 12:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 12:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 12:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 13:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 13:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 13:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 13:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 13:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 13:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB91AB0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 13:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 13:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 13:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 13:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 13:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 13:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 13:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 13:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 13:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 13:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 13:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 14:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 14:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91E10
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 14:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0

Thread 0, Frame 14:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 14:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 14:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB911B0
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 14:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 14:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 14:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 14:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 14:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 14:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8940
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 14:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 14:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 14:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE169080

Thread 0, Frame 14:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91E10
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE169080
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90AF0
    fence:                          VkFence = 000001F3BE1CF8B0

Thread 0, Frame 14:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90AF0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 15:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 15:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    swapchain:                      VkSwapchainKHR = 000001F3BB7BB8C0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001F3BDB91870
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 15:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD98
        pFences[0]:                     const VkFence = 000001F3BE1CFF10

Thread 0, Frame 15:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 15:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000597F34F9A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 15:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000597F34F9C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001F3B83DD600
        framebuffer:                    VkFramebuffer = 000001F3BDB90430
        renderArea:                     VkRect2D = 000000597F34F9E0:
            offset:                         VkOffset2D = 000000597F34F9E0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34F9E8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 000000597F34FA28
            pClearValues[0]:                const VkClearValue = 000000597F34FA28 (Union):
                color:                          VkClearColorValue = 000000597F34FA28 (Union):
                    float32:                        float[4] = 000000597F34FA28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 000000597F34FA28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 000000597F34FA28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 000000597F34FA38 (Union):
                color:                          VkClearColorValue = 000000597F34FA38 (Union):
                    float32:                        float[4] = 000000597F34FA38
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000597F34FA38
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000597F34FA38
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000597F34FA38:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 15:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001F3BE107B50

Thread 0, Frame 15:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000597F34FA50
        pBuffers[0]:                    const VkBuffer = 000001F3B8369F40
    pOffsets:                       const VkDeviceSize* = 000000597F34FA48
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 15:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    buffer:                         VkBuffer = 000001F3BE168EB0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 15:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000597F34FA00
        pViewports[0]:                  const VkViewport = 000000597F34FA00:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 15:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000597F34FA18
        pScissors[0]:                   const VkRect2D = 000000597F34FA18:
            offset:                         VkOffset2D = 000000597F34FA18:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000597F34FA20:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 15:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001F3BE0FFA90
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001F3BDD8B1B8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001F3BE1C8CB8
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 15:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 15:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 15:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001F3BE17EC60

Thread 0, Frame 15:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000597F34FAF0
        pSubmits[0]:                    const VkSubmitInfo = 000000597F34FAF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 000000597F34FB90
                pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB91870
            pWaitDstStageMask:              const VkPipelineStageFlags* = 000000597F34FB84
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001F3BDD8AC18
                pCommandBuffers[0]:             const VkCommandBuffer = 000001F3BE17EC60
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000597F34FB88
                pSignalSemaphores[0]:           const VkSemaphore = 000001F3BDB90C10
    fence:                          VkFence = 000001F3BE1CFF10

Thread 0, Frame 15:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001F3BDF8ACC0
    pPresentInfo:                   const VkPresentInfoKHR* = 000000597F34FB40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000597F34FB88
            pWaitSemaphores[0]:             const VkSemaphore = 000001F3BDB90C10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000597F34FB98
            pSwapchains[0]:                 const VkSwapchainKHR = 000001F3BB7BB8C0
        pImageIndices:                  const uint32_t* = 000000597F34FB80
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 16:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_ERROR_DEVICE_LOST (-4):
    device:                         VkDevice = 000001F3BDB98770
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001F3BDD8AD90
        pFences[0]:                     const VkFence = 000001F3BE1CF8B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

