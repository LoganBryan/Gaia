Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 0000003EB7EFB6B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 0000003EB7EFB680:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "Hello Triangle"
            applicationVersion:             uint32_t = 4194304
            pEngineName:                    const char* = "No Engine"
            engineVersion:                  uint32_t = 4194304
            apiVersion:                     uint32_t = 4198400
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 2
        ppEnabledExtensionNames:        const char* const* = 000001DC0BC04080
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001DC0E4CBCD0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E4CBCD0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E4CBCD0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001DC0E5259F0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001DC0E4E3F80

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E4E3F80
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0000003EB7EFB8E0:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0000003EB7EFB8E4
            memoryTypes[0]:                 VkMemoryType = 0000003EB7EFB8E4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0000003EB7EFB8EC:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0000003EB7EFB8F4:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 0000003EB7EFB8FC:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0000003EB7EFB904:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 0000003EB7EFB90C:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0000003EB7EFB9E8
            memoryHeaps[0]:                 VkMemoryHeap = 0000003EB7EFB9E8:
                size:                           VkDeviceSize = 8406433792
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0000003EB7EFB9F8:
                size:                           VkDeviceSize = 17081991168
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 0000003EB7EFB6B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 0000003EB7EFB680:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "Hello Triangle"
            applicationVersion:             uint32_t = 4194304
            pEngineName:                    const char* = "No Engine"
            engineVersion:                  uint32_t = 4194304
            apiVersion:                     uint32_t = 4198400
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 2
        ppEnabledExtensionNames:        const char* const* = 000001DC0BC04080
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001DC0E3E15E0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001DC0E4ED650
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001DC0E671F10

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0000003EB7EFB8E0:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0000003EB7EFB8E4
            memoryTypes[0]:                 VkMemoryType = 0000003EB7EFB8E4:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 0000003EB7EFB8EC:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 0000003EB7EFB8F4:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 0000003EB7EFB8FC:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 0000003EB7EFB904:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 0000003EB7EFB90C:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0000003EB7EFB9E8
            memoryHeaps[0]:                 VkMemoryHeap = 0000003EB7EFB9E8:
                size:                           VkDeviceSize = 8406433792
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 0000003EB7EFB9F8:
                size:                           VkDeviceSize = 17081991168
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 0000003EB7EFF5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)
        pNext:                          const void* = NULL
        flags:                          VkWin32SurfaceCreateFlagsKHR = 0
        hinstance:                      HINSTANCE = 00007FF6F6060000
        hwnd:                           HWND = 00000000008D0C7E
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = 000001DC0E4F0D90

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001DC0E4ED650
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001DC0E671F10

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pProperties:                    VkPhysicalDeviceProperties* = 000001DC0E9597A0:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001DC0E9598B4
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000001DC0E9598C8:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001DC0E9599A4
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000001DC0E9599B4
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001DC0E9599E0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000001DC0E9599E8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001DC0E959A84
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001DC0E959A8C
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001DC0E959AC0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DC0E3E15E0
    pPhysicalDeviceCount:           uint32_t* = 1
    pPhysicalDevices:               VkPhysicalDevice* = 000001DC0E4ED7F0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001DC0E671F10

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pProperties:                    VkPhysicalDeviceProperties* = 000001DC0E3E2C70:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001DC0E3E2D84
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000001DC0E3E2D98:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001DC0E3E2E74
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000001DC0E3E2E84
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001DC0E3E2EB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000001DC0E3E2EB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001DC0E3E2F54
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001DC0E3E2F5C
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001DC0E3E2F90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pFeatures:                      VkPhysicalDeviceFeatures* = 000001DC0E3E2FA8:
        robustBufferAccess:             VkBool32 = 1
        fullDrawIndexUint32:            VkBool32 = 1
        imageCubeArray:                 VkBool32 = 1
        independentBlend:               VkBool32 = 1
        geometryShader:                 VkBool32 = 1
        tessellationShader:             VkBool32 = 1
        sampleRateShading:              VkBool32 = 1
        dualSrcBlend:                   VkBool32 = 1
        logicOp:                        VkBool32 = 1
        multiDrawIndirect:              VkBool32 = 1
        drawIndirectFirstInstance:      VkBool32 = 1
        depthClamp:                     VkBool32 = 1
        depthBiasClamp:                 VkBool32 = 1
        fillModeNonSolid:               VkBool32 = 1
        depthBounds:                    VkBool32 = 1
        wideLines:                      VkBool32 = 1
        largePoints:                    VkBool32 = 1
        alphaToOne:                     VkBool32 = 1
        multiViewport:                  VkBool32 = 1
        samplerAnisotropy:              VkBool32 = 1
        textureCompressionETC2:         VkBool32 = 0
        textureCompressionASTC_LDR:     VkBool32 = 0
        textureCompressionBC:           VkBool32 = 1
        occlusionQueryPrecise:          VkBool32 = 1
        pipelineStatisticsQuery:        VkBool32 = 1
        vertexPipelineStoresAndAtomics: VkBool32 = 1
        fragmentStoresAndAtomics:       VkBool32 = 1
        shaderTessellationAndGeometryPointSize: VkBool32 = 1
        shaderImageGatherExtended:      VkBool32 = 1
        shaderStorageImageExtendedFormats: VkBool32 = 1
        shaderStorageImageMultisample:  VkBool32 = 1
        shaderStorageImageReadWithoutFormat: VkBool32 = 1
        shaderStorageImageWriteWithoutFormat: VkBool32 = 1
        shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
        shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
        shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
        shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
        shaderClipDistance:             VkBool32 = 1
        shaderCullDistance:             VkBool32 = 1
        shaderFloat64:                  VkBool32 = 1
        shaderInt64:                    VkBool32 = 1
        shaderInt16:                    VkBool32 = 1
        shaderResourceResidency:        VkBool32 = 1
        shaderResourceMinLod:           VkBool32 = 1
        sparseBinding:                  VkBool32 = 1
        sparseResidencyBuffer:          VkBool32 = 1
        sparseResidencyImage2D:         VkBool32 = 1
        sparseResidencyImage3D:         VkBool32 = 1
        sparseResidency2Samples:        VkBool32 = 1
        sparseResidency4Samples:        VkBool32 = 1
        sparseResidency8Samples:        VkBool32 = 1
        sparseResidency16Samples:       VkBool32 = 1
        sparseResidencyAliased:         VkBool32 = 1
        variableMultisampleRate:        VkBool32 = 1
        inheritedQueries:               VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DC0E614F00
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DC0E614F00:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E614F0C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DC0E614F18:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E614F24:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001DC0E614F30:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E614F3C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001DC0E614F48:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E614F54:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001DC0E614F60:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E614F6C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001DC0E614F78:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E614F84:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000003EB7EFF500:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0000003EB7EFF508:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 0000003EB7EFF510:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 0000003EB7EFF518:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001DC0E3CC870
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001DC0E3CC870:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001DC0E3CC878:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001DC0E3CC880:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 000001DC0E3CC888:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 000001DC0E3CC890:
            format:                         VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT (1000104002)
        pSurfaceFormats[5]:             VkSurfaceFormatKHR = 000001DC0E3CC898:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_HDR10_ST2084_EXT (1000104008)
        pSurfaceFormats[6]:             VkSurfaceFormatKHR = 000001DC0E3CC8A0:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 000001DC0E63CD20
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pProperties:                    VkPhysicalDeviceProperties* = 0000003EB7EFF2D0:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000003EB7EFF3E4
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 0000003EB7EFF3F8:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0000003EB7EFF4D4
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0000003EB7EFF4E4
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0000003EB7EFF510
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0000003EB7EFF518
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0000003EB7EFF5B4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0000003EB7EFF5BC
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000003EB7EFF5F0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DC0E66F080
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DC0E66F080:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66F08C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DC0E66F098:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66F0A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001DC0E66F0B0:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66F0BC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001DC0E66F0C8:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66F0D4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001DC0E66F0E0:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66F0EC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001DC0E66F0F8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66F104:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pCreateInfo:                    const VkDeviceCreateInfo* = 0000003EB7EFF2D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 000001DC0E6739E0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 000001DC0E6739E0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 0000003EB7EFF530
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 1
        ppEnabledExtensionNames:        const char* const* = 000001DC0BB53BA0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 0000003EB7EFF590:
            robustBufferAccess:             VkBool32 = 0
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 0
            independentBlend:               VkBool32 = 0
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 0
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 0
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          const void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DC0E6A2F90

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 0000003EB7EFE710:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 0000003EB7EFE738:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 0000003EB7EFE770:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 0000003EB7EFE780:
            maxExtent:                      VkExtent3D = 0000003EB7EFE780:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 0000003EB7EFE750:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 0000003EB7EFE760:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0000003EB7EFE630
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0000003EB7EFE630:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE63C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0000003EB7EFE648:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE654:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 0000003EB7EFE660:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE66C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 0000003EB7EFE678:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE684:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 0000003EB7EFE690:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE69C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 0000003EB7EFE6A8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE6B4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DC10EEB630

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 0000003EB7EFE870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 0000003EB7EFE898:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 0000003EB7EFE8D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 0000003EB7EFE8E0:
            maxExtent:                      VkExtent3D = 0000003EB7EFE8E0:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 0000003EB7EFE8B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 0000003EB7EFE8C0:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0000003EB7EFE790
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0000003EB7EFE790:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE79C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0000003EB7EFE7A8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE7B4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 0000003EB7EFE7C0:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE7CC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 0000003EB7EFE7D8:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE7E4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 0000003EB7EFE7F0:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE7FC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 0000003EB7EFE808:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000003EB7EFE814:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DC10EEB630

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DC0E66EC20
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DC0E66EC20:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66EC2C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DC0E66EC38:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66EC44:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001DC0E66EC50:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66EC5C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001DC0E66EC68:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66EC74:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001DC0E66EC80:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66EC8C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001DC0E66EC98:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66ECA4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DC10EEB630

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DC10EEB630

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DC10EEB630

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pProperties:                    VkPhysicalDeviceProperties* = 000001DC11038FE0:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000001DC110390F4
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 000001DC11039108:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000001DC110391E4
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000001DC110391F4
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000001DC11039220
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000001DC11039228
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000001DC110392C4
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 000001DC110392CC
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000001DC11039300:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000001DC11039318:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000001DC1103931C
            memoryTypes[0]:                 VkMemoryType = 000001DC1103931C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000001DC11039324:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 000001DC1103932C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 000001DC11039334:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000001DC1103933C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000001DC11039344:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 0
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000001DC11039420
            memoryHeaps[0]:                 VkMemoryHeap = 000001DC11039420:
                size:                           VkDeviceSize = 8406433792
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000001DC11039430:
                size:                           VkDeviceSize = 17081991168
                flags:                          VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties2* = 0000003EB7EFF240:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 (1000059006)
        pNext:                          void* = VkPhysicalDeviceMemoryBudgetPropertiesEXT
        memoryProperties:               VkPhysicalDeviceMemoryProperties = 0000003EB7EFF250:
            memoryTypeCount:                uint32_t = 6
            memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0000003EB7EFF254
                memoryTypes[0]:                 VkMemoryType = 0000003EB7EFF254:
                    propertyFlags:                  VkMemoryPropertyFlags = 0
                    heapIndex:                      uint32_t = 1
                memoryTypes[1]:                 VkMemoryType = 0000003EB7EFF25C:
                    propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                    heapIndex:                      uint32_t = 0
                memoryTypes[2]:                 VkMemoryType = 0000003EB7EFF264:
                    propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                    heapIndex:                      uint32_t = 0
                memoryTypes[3]:                 VkMemoryType = 0000003EB7EFF26C:
                    propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                    heapIndex:                      uint32_t = 1
                memoryTypes[4]:                 VkMemoryType = 0000003EB7EFF274:
                    propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                    heapIndex:                      uint32_t = 1
                memoryTypes[5]:                 VkMemoryType = 0000003EB7EFF27C:
                    propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                    heapIndex:                      uint32_t = 0
            memoryHeapCount:                uint32_t = 2
            memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0000003EB7EFF358
                memoryHeaps[0]:                 VkMemoryHeap = 0000003EB7EFF358:
                    size:                           VkDeviceSize = 8406433792
                    flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
                memoryHeaps[1]:                 VkMemoryHeap = 0000003EB7EFF368:
                    size:                           VkDeviceSize = 17081991168
                    flags:                          VkMemoryHeapFlags = 0
        pNext:                          VkPhysicalDeviceMemoryBudgetPropertiesEXT = 0000003EB7EFF130:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT (1000237000)
            pNext:                          void* = NULL
            heapBudget:                     VkDeviceSize[VK_MAX_MEMORY_HEAPS] = 0000003EB7EFF140
                heapBudget[0]:                  VkDeviceSize = 7601127424
                heapBudget[1]:                  VkDeviceSize = 16276686848
            heapUsage:                      VkDeviceSize[VK_MAX_MEMORY_HEAPS] = 0000003EB7EFF1C0
                heapUsage[0]:                   VkDeviceSize = 3264512
                heapUsage[1]:                   VkDeviceSize = 11612160

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000003EB7EFF5F0:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 0000003EB7EFF5F8:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 0000003EB7EFF600:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 0000003EB7EFF608:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSurfaceFormatCount:            uint32_t* = 7
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001DC11046290
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001DC11046290:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001DC11046298:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001DC110462A0:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 000001DC110462A8:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 000001DC110462B0:
            format:                         VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT (1000104002)
        pSurfaceFormats[5]:             VkSurfaceFormatKHR = 000001DC110462B8:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_HDR10_ST2084_EXT (1000104008)
        pSurfaceFormats[6]:             VkSurfaceFormatKHR = 000001DC110462C0:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 000001DC10CEC080
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DC0E66E720
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DC0E66E720:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66E72C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DC0E66E738:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66E744:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001DC0E66E750:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66E75C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001DC0E66E768:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66E774:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001DC0E66E780:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66E78C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001DC0E66E798:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0E66E7A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0000003EB7EFEFB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = 000001DC0E4F0D90
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 0000003EB7EFEFDC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = 0000000000000000
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = 000001DC10AFD7A0

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001DC0E6745E8
        pSwapchainImages[0]:            VkImage = 000001DC1105EA00
        pSwapchainImages[1]:            VkImage = 000001DC1105F600
        pSwapchainImages[2]:            VkImage = 000001DC1105FC80

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001DC0E673A78
        pSwapchainImages[0]:            VkImage = 000001DC1105EA00
        pSwapchainImages[1]:            VkImage = 000001DC1105F600
        pSwapchainImages[2]:            VkImage = 000001DC1105FC80

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001DC10CEAA00
        pSwapchainImages[0]:            VkImage = 000001DC1105EA00
        pSwapchainImages[1]:            VkImage = 000001DC1105F600
        pSwapchainImages[2]:            VkImage = 000001DC1105FC80

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageViewCreateInfo* = 0000003EB7EFF610:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001DC1105EA00
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0000003EB7EFF638:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF648:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001DC10FD5880

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageViewCreateInfo* = 0000003EB7EFF610:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001DC1105F600
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0000003EB7EFF638:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF648:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001DC10FD5C70

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageViewCreateInfo* = 0000003EB7EFF610:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001DC1105FC80
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0000003EB7EFF638:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF648:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001DC10FD6300

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 0000003EB7EFF430:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkRenderPassCreateInfo* = 0000003EB7EFF560:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkAttachmentDescription* = 0000003EB7EFF620
            pAttachments[0]:                const VkAttachmentDescription = 0000003EB7EFF620:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)
            pAttachments[1]:                const VkAttachmentDescription = 0000003EB7EFF644:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 0000003EB7EFF5A0
            pSubpasses[0]:                  const VkSubpassDescription = 0000003EB7EFF5A0:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 0000003EB7EFF5F0
                    pColorAttachments[0]:           const VkAttachmentReference = 0000003EB7EFF5F0:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = NULL
                pDepthStencilAttachment:        const VkAttachmentReference* = 0000003EB7EFF5F8:
                    attachment:                     uint32_t = 1
                    layout:                         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 1
        pDependencies:                  const VkSubpassDependency* = 0000003EB7EFF600
            pDependencies[0]:               const VkSubpassDependency = 0000003EB7EFF600:
                srcSubpass:                     uint32_t = 4294967295
                dstSubpass:                     uint32_t = 0
                srcStageMask:                   VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                dstStageMask:                   VkPipelineStageFlags = 1280 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
                dstAccessMask:                  VkAccessFlags = 1280 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
                dependencyFlags:                VkDependencyFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 000001DC0BC1D370

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0000003EB7EFF628:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 2
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0000003EB7EFF648
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0000003EB7EFF648:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 0000003EB7EFF660:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 000001DC1103D5D0

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0000003EB7EFF1C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1840
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 000001DC10AED090

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0000003EB7EFF1C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 728
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 000001DC10AEDAB0

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0000003EB7EFF300:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 0000003EB7EFF740
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 000001DC1103D5D0
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 000001DC11063EE0

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0000003EB7EFF3B0
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0000003EB7EFF3B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 0000003EB7EFF600
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0000003EB7EFF600:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = 000001DC10AED090
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0000003EB7EFF630:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = 000001DC10AEDAB0
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0000003EB7EFF330:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 1
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0000003EB7EFF490
                    pVertexBindingDescriptions[0]:  const VkVertexInputBindingDescription = 0000003EB7EFF490:
                        binding:                        uint32_t = 0
                        stride:                         uint32_t = 32
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0000003EB7EFF5D0
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 0000003EB7EFF5D0:
                        location:                       uint32_t = 0
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 0000003EB7EFF5E0:
                        location:                       uint32_t = 1
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                         uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 0000003EB7EFF5F0:
                        location:                       uint32_t = 2
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                         uint32_t = 24
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0000003EB7EFF510:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0000003EB7EFF360:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0000003EB7EFF4B0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 2 (VK_CULL_MODE_BACK_BIT)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0000003EB7EFF2D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 1
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0000003EB7EFF560:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 1
                depthWriteEnable:               VkBool32 = 1
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_LESS (1)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 0000003EB7EFF588:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 0000003EB7EFF5A4:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 1
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0000003EB7EFF440:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 0000003EB7EFF4F0
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 0000003EB7EFF4F0:
                        blendEnable:                    VkBool32 = 1
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA (6)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA (7)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 0000003EB7EFF468
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 0000003EB7EFF390:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 2
                pDynamicStates:                 const VkDynamicState* = 000001DC0BB53D50
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
            layout:                         VkPipelineLayout = 000001DC11063EE0
            renderPass:                     VkRenderPass = 000001DC0BC1D370
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = -1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0000003EB7EFF750
        pPipelines[0]:                  VkPipeline = 000001DC1106BFA0

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    shaderModule:                   VkShaderModule = 000001DC10AED090
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    shaderModule:                   VkShaderModule = 000001DC10AEDAB0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DC0BB90320
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DC0BB90320:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0BB9032C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DC0BB90338:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0BB90344:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001DC0BB90350:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0BB9035C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001DC0BB90368:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0BB90374:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001DC0BB90380:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DC0BB9038C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001DC0BB90398:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DC0BB903A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001DC0E4F0D90
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0000003EB7EFF658:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 000001DC11084D80

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageCreateInfo* = 0000003EB7EFF590:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        extent:                         VkExtent3D = 0000003EB7EFF5AC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 80 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001DC11085100

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 0000003EB7EFF3B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = 000001DC11085100
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF3E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF3F0:
            size:                           VkDeviceSize = 2048000
            alignment:                      VkDeviceSize = 1024
            memoryTypeBits:                 uint32_t = 3
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF3C8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000003EB7EFF030:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 33554432
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001DC11085780

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    image:                          VkImage = 000001DC11085100
    memory:                         VkDeviceMemory = 000001DC11085780
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageViewCreateInfo* = 0000003EB7EFF5B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001DC11085100
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        components:                     VkComponentMapping = 0000003EB7EFF5D8:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF5E8:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001DC10FD5DC0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 0000003EB7EFF560:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageCreateInfo* = 0000003EB7EFF590:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:                         VkExtent3D = 0000003EB7EFF5AC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001DC11062DC0

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 0000003EB7EFF3B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = 000001DC11062DC0
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF3E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF3F0:
            size:                           VkDeviceSize = 2048000
            alignment:                      VkDeviceSize = 1024
            memoryTypeBits:                 uint32_t = 3
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF3C8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    image:                          VkImage = 000001DC11062DC0
    memory:                         VkDeviceMemory = 000001DC11085780
    memoryOffset:                   VkDeviceSize = 2048000

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageViewCreateInfo* = 0000003EB7EFF5B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001DC11062DC0
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 0000003EB7EFF5D8:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF5E8:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001DC10FD6450

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF4C8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0000003EB7EFF4C0
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF4E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 256 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF590
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF590:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 1536 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11062DC0
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF5C0:
                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF4B0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF4B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF4A0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    commandPool:                    VkCommandPool = 000001DC11084D80
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF4A0
        pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkFramebufferCreateInfo* = 0000003EB7EFF600:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkImageView* = 0000003EB7EFF640
            pAttachments[0]:                const VkImageView = 000001DC10FD5880
            pAttachments[1]:                const VkImageView = 000001DC10FD6450
        width:                          uint32_t = 800
        height:                         uint32_t = 600
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001DC10AEEB90

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkFramebufferCreateInfo* = 0000003EB7EFF600:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkImageView* = 0000003EB7EFF640
            pAttachments[0]:                const VkImageView = 000001DC10FD5C70
            pAttachments[1]:                const VkImageView = 000001DC10FD6450
        width:                          uint32_t = 800
        height:                         uint32_t = 600
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001DC10AED3F0

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkFramebufferCreateInfo* = 0000003EB7EFF600:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        attachmentCount:                uint32_t = 2
        pAttachments:                   const VkImageView* = 0000003EB7EFF640
            pAttachments[0]:                const VkImageView = 000001DC10FD6300
            pAttachments[1]:                const VkImageView = 000001DC10FD6450
        width:                          uint32_t = 800
        height:                         uint32_t = 600
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001DC10AED630

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF588:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 154448
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC11094CB0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF3B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC11094CB0
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF3E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF3F0:
            size:                           VkDeviceSize = 154448
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF3C8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000003EB7EFF030:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 33554432
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001DC11085950

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DC154F0000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageCreateInfo* = 0000003EB7EFF550:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        extent:                         VkExtent3D = 0000003EB7EFF56C:
            width:                          uint32_t = 196
            height:                         uint32_t = 197
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 8
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 7 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001DC11092C10

Thread 0, Frame 0:
vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkImageMemoryRequirementsInfo2* = 0000003EB7EFF370:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (1000146001)
        pNext:                          const void* = NULL
        image:                          VkImage = 000001DC11092C10
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF3A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF3B0:
            size:                           VkDeviceSize = 293376
            alignment:                      VkDeviceSize = 1024
            memoryTypeBits:                 uint32_t = 3
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF388:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    image:                          VkImage = 000001DC11092C10
    memory:                         VkDeviceMemory = 000001DC11085780
    memoryOffset:                   VkDeviceSize = 4096000

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF488:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0000003EB7EFF480
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF4A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF550
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF550:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF580:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 8
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF470
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF470:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF460
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    commandPool:                    VkCommandPool = 000001DC11084D80
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF460
        pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF4E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0000003EB7EFF4E0
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF508:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcBuffer:                      VkBuffer = 000001DC11094CB0
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 0000003EB7EFF570
        pRegions[0]:                    const VkBufferImageCopy = 0000003EB7EFF570:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 0
            bufferImageHeight:              uint32_t = 0
            imageSubresource:               VkImageSubresourceLayers = 0000003EB7EFF580:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 0000003EB7EFF590:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 0000003EB7EFF59C:
                width:                          uint32_t = 196
                height:                         uint32_t = 197
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF4D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF4D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF4C0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    commandPool:                    VkCommandPool = 000001DC11084D80
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF4C0
        pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
    pFormatProperties:              VkFormatProperties* = 0000003EB7EFF580:
        linearTilingFeatures:           VkFormatFeatureFlags = 121857 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122241 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 8 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF418:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0000003EB7EFF410
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF438:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 196
                    y:                              int32_t = 197
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 98
                    y:                              int32_t = 98
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 1
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 98
                    y:                              int32_t = 98
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 2
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 49
                    y:                              int32_t = 49
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 1
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 2
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 2
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 49
                    y:                              int32_t = 49
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 3
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 24
                    y:                              int32_t = 24
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 2
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 3
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 3
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 24
                    y:                              int32_t = 24
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 4
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 12
                    y:                              int32_t = 12
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 3
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 4
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 4
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 12
                    y:                              int32_t = 12
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 5
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 6
                    y:                              int32_t = 6
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 4
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 5
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 5
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 6
                    y:                              int32_t = 6
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 6
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 3
                    y:                              int32_t = 3
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 5
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 6
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcImage:                       VkImage = 000001DC11092C10
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                       VkImage = 000001DC11092C10
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkImageBlit* = 0000003EB7EFF530
        pRegions[0]:                    const VkImageBlit = 0000003EB7EFF530:
            srcSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF530:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 6
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            srcOffsets:                     VkOffset3D[2] = 0000003EB7EFF540
                srcOffsets[0]:                  VkOffset3D = 0000003EB7EFF540:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                srcOffsets[1]:                  VkOffset3D = 0000003EB7EFF54C:
                    x:                              int32_t = 3
                    y:                              int32_t = 3
                    z:                              int32_t = 1
            dstSubresource:                 VkImageSubresourceLayers = 0000003EB7EFF558:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 7
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            dstOffsets:                     VkOffset3D[2] = 0000003EB7EFF568
                dstOffsets[0]:                  VkOffset3D = 0000003EB7EFF568:
                    x:                              int32_t = 0
                    y:                              int32_t = 0
                    z:                              int32_t = 0
                dstOffsets[1]:                  VkOffset3D = 0000003EB7EFF574:
                    x:                              int32_t = 1
                    y:                              int32_t = 1
                    z:                              int32_t = 1
    filter:                         VkFilter = VK_FILTER_LINEAR (1)

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 6
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 0000003EB7EFF4E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 0000003EB7EFF4E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 4294967295
            dstQueueFamilyIndex:            uint32_t = 4294967295
            image:                          VkImage = 000001DC11092C10
            subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF510:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 7
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF400
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF400:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF3F0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    commandPool:                    VkCommandPool = 000001DC11084D80
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF3F0
        pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkImageViewCreateInfo* = 0000003EB7EFF5E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001DC11092C10
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        components:                     VkComponentMapping = 0000003EB7EFF608:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 0000003EB7EFF618:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 8
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001DC1110B7A0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DC0E671F10
    pProperties:                    VkPhysicalDeviceProperties* = 0000003EB7EFF330:
        apiVersion:                     uint32_t = 4206869
        driverVersion:                  uint32_t = 2315616256
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9346
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3070 Ti"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000003EB7EFF444
            pipelineCacheUUID[0]:           uint8_t = 78
            pipelineCacheUUID[1]:           uint8_t = 73
            pipelineCacheUUID[2]:           uint8_t = 194
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 51
            pipelineCacheUUID[5]:           uint8_t = 37
            pipelineCacheUUID[6]:           uint8_t = 122
            pipelineCacheUUID[7]:           uint8_t = 214
            pipelineCacheUUID[8]:           uint8_t = 207
            pipelineCacheUUID[9]:           uint8_t = 115
            pipelineCacheUUID[10]:          uint8_t = 177
            pipelineCacheUUID[11]:          uint8_t = 194
            pipelineCacheUUID[12]:          uint8_t = 57
            pipelineCacheUUID[13]:          uint8_t = 88
            pipelineCacheUUID[14]:          uint8_t = 134
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 0000003EB7EFF458:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 0000003EB7EFF534
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 0000003EB7EFF544
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 0000003EB7EFF570
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 0000003EB7EFF578
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 0000003EB7EFF614
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 0000003EB7EFF61C
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000003EB7EFF650:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkSamplerCreateInfo* = 0000003EB7EFF2E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:                          const void* = NULL
        flags:                          VkSamplerCreateFlags = 0
        magFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        minFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        mipLodBias:                     float = 0
        anisotropyEnable:               VkBool32 = 1
        maxAnisotropy:                  float = 16
        compareEnable:                  VkBool32 = 0
        compareOp:                      VkCompareOp = VK_COMPARE_OP_ALWAYS (7)
        minLod:                         float = 0
        maxLod:                         float = 8
        borderColor:                    VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates:        VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSampler:                       VkSampler* = 000001DC111322F0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF5D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 17792
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC11094CB0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF400:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC11094CB0
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF430:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF440:
            size:                           VkDeviceSize = 17792
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF418:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DC154F0000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF5D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 17792
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC0BE11E40

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF400:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC0BE11E40
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF430:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF440:
            size:                           VkDeviceSize = 17792
            alignment:                      VkDeviceSize = 16
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF418:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC0BE11E40
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 17792

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF558:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0000003EB7EFF550
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF578:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcBuffer:                      VkBuffer = 000001DC11094CB0
    dstBuffer:                      VkBuffer = 000001DC0BE11E40
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0000003EB7EFF5E0
        pRegions[0]:                    const VkBufferCopy = 0000003EB7EFF5E0:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 17792

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF540
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF540:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF530
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    commandPool:                    VkCommandPool = 000001DC11084D80
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF530
        pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF5D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 11616
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC11094CB0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF400:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC11094CB0
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF430:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF440:
            size:                           VkDeviceSize = 11616
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF418:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DC154F0000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF5D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 11616
        usage:                          VkBufferUsageFlags = 66 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC10AFCEE0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF400:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC10AFCEE0
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF430:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF440:
            size:                           VkDeviceSize = 11616
            alignment:                      VkDeviceSize = 4
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF418:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC10AFCEE0
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 35584

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF558:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 0000003EB7EFF550
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF578:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    srcBuffer:                      VkBuffer = 000001DC11094CB0
    dstBuffer:                      VkBuffer = 000001DC10AFCEE0
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 0000003EB7EFF5E0
        pRegions[0]:                    const VkBufferCopy = 0000003EB7EFF5E0:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 11616

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF540
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF540:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF530
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueWaitIdle(queue) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    commandPool:                    VkCommandPool = 000001DC11084D80
    commandBufferCount:             uint32_t = 1
    pCommandBuffers:                const VkCommandBuffer* = 0000003EB7EFF530
        pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF5F8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 192
        usage:                          VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC11094CB0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF420:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC11094CB0
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF450:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF460:
            size:                           VkDeviceSize = 192
            alignment:                      VkDeviceSize = 64
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC11094CB0
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkBufferCreateInfo* = 0000003EB7EFF5F8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 192
        usage:                          VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001DC1108BC60

Thread 0, Frame 0:
vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    pInfo:                          const VkBufferMemoryRequirementsInfo2* = 0000003EB7EFF420:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (1000146000)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 000001DC1108BC60
    pMemoryRequirements:            VkMemoryRequirements2* = 0000003EB7EFF450:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (1000146003)
        pNext:                          void* = VkMemoryDedicatedRequirements
        memoryRequirements:             VkMemoryRequirements = 0000003EB7EFF460:
            size:                           VkDeviceSize = 192
            alignment:                      VkDeviceSize = 64
            memoryTypeBits:                 uint32_t = 59
        pNext:                          VkMemoryDedicatedRequirements = 0000003EB7EFF438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (1000127000)
            pNext:                          void* = NULL
            prefersDedicatedAllocation:     VkBool32 = 0
            requiresDedicatedAllocation:    VkBool32 = 0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    buffer:                         VkBuffer = 000001DC1108BC60
    memory:                         VkDeviceMemory = 000001DC11085950
    memoryOffset:                   VkDeviceSize = 192

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0000003EB7EFF638:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 0
        maxSets:                        uint32_t = 2
        poolSizeCount:                  uint32_t = 2
        pPoolSizes:                     const VkDescriptorPoolSize* = 0000003EB7EFF660
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 0000003EB7EFF660:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 2
            pPoolSizes[1]:                  const VkDescriptorPoolSize = 0000003EB7EFF668:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
                descriptorCount:                uint32_t = 2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 000001DC110930A0

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000003EB7EFF590:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 000001DC110930A0
        descriptorSetCount:             uint32_t = 2
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001DC10CEAD20
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 000001DC1103D5D0
            pSetLayouts[1]:                 const VkDescriptorSetLayout = 000001DC1103D5D0
    pDescriptorSets:                VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             VkDescriptorSet = 000001DC111372D0
        pDescriptorSets[1]:             VkDescriptorSet = 000001DC11137648

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    descriptorWriteCount:           uint32_t = 2
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0000003EB7EFF5D0
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001DC111372D0
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0000003EB7EFF578
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0000003EB7EFF578:
                    buffer:                         VkBuffer = 000001DC11094CB0
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 192
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 0000003EB7EFF610:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001DC111372D0
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo:                     const VkDescriptorImageInfo* = 0000003EB7EFF560
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0000003EB7EFF560:
                    sampler:                        VkSampler = 000001DC111322F0
                    imageView:                      VkImageView = 000001DC1110B7A0
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    descriptorWriteCount:           uint32_t = 2
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0000003EB7EFF5D0
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001DC11137648
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0000003EB7EFF578
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0000003EB7EFF578:
                    buffer:                         VkBuffer = 000001DC1108BC60
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 192
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 0000003EB7EFF610:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001DC11137648
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER (1)
            pImageInfo:                     const VkDescriptorImageInfo* = 0000003EB7EFF560
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0000003EB7EFF560:
                    sampler:                        VkSampler = 000001DC111322F0
                    imageView:                      VkImageView = 000001DC1110B7A0
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000003EB7EFF658:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001DC11084D80
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 2
    pCommandBuffers:                VkCommandBuffer* = 000001DC10CEABE0
        pCommandBuffers[0]:             VkCommandBuffer = 000001DC110CD600
        pCommandBuffers[1]:             VkCommandBuffer = 000001DC11107670

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000003EB7EFF688:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001DC10AED750

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000003EB7EFF688:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001DC10AEE050

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkFenceCreateInfo* = 0000003EB7EFF6A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001DC11138A00

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000003EB7EFF688:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001DC10AED2D0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000003EB7EFF688:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001DC10AEECB0

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    pCreateInfo:                    const VkFenceCreateInfo* = 0000003EB7EFF6A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001DC11139B00

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DC154F0000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 0:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 0:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 1:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 1:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 1:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DC154F0000

Thread 0, Frame 1:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950

Thread 0, Frame 1:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 1:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 1:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 1:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 1:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 1:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 1:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 1:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 1:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 1:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 1:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 1:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 1:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 1:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 1:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 2:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 2:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 2:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    memory:                         VkDeviceMemory = 000001DC11085950
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 18446744073709551615
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DC154F0000

Thread 0, Frame 2:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 2:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 2:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 2:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 2:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 2:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 2:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 2:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 2:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 2:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 2:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 2:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 2:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 2:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 2:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 3:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 3:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 3:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 3:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 3:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 3:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 3:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 3:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 3:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 3:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 3:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 3:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 3:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 3:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 3:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 3:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 3:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 4:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 4:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 4:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 4:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 4:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 4:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 4:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 4:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 4:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 4:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 4:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 4:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 4:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 4:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 4:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 4:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 4:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 5:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 5:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 5:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 5:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 5:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 5:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 5:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 5:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 5:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 5:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 5:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 5:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 5:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 5:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 5:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 5:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 5:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 6:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 6:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 6:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 6:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 6:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 6:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 6:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 6:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 6:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 6:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 6:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 6:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 6:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 6:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 6:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 6:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 6:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 7:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 7:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 7:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 7:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 7:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 7:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 7:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 7:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 7:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 7:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 7:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 7:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 7:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 7:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 7:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 7:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 7:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 8:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 8:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 8:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 8:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 8:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 8:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 8:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 8:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 8:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 8:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 8:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 8:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 8:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 8:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 8:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 8:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 8:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 9:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 9:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 9:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 9:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 9:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 9:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 9:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 9:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 9:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 9:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 9:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 9:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 9:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 9:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 9:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 9:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 9:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 10:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 10:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 10:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 10:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 10:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 10:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 10:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 10:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 10:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 10:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 10:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 10:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 10:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 10:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 10:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 10:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 10:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 11:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 11:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 11:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 11:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 11:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 11:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 11:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 11:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 11:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 11:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 11:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 11:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 11:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 11:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 11:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 11:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 11:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 12:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 12:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 12:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 12:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 12:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 12:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 12:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 12:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 12:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 12:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 12:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 12:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 12:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 12:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 12:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 12:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 12:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 13:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 13:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 13:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 13:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 13:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 13:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 13:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 13:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 13:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 13:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 13:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 13:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 13:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 13:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 13:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 13:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 13:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 14:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 14:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 14:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 14:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 14:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 14:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 14:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 14:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 14:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 14:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 14:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 14:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 14:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 14:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 14:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 14:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 14:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 15:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 15:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 15:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 15:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 15:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 15:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 15:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 15:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 15:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 15:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 15:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 15:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 15:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 15:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 15:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 15:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 15:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 16:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 16:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 16:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 16:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 16:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 16:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 16:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 16:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 16:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 16:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 16:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 16:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 16:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 16:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 16:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 16:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 16:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 17:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 17:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 17:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 17:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 17:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 17:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 17:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 17:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 17:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 17:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 17:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 17:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 17:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 17:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 17:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 17:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 17:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 18:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 18:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 18:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 18:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 18:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 18:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 18:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 18:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 18:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 18:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 18:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 18:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 18:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 18:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 18:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 18:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 18:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 19:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 19:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 19:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 19:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 19:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 19:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 19:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 19:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 19:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 19:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 19:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 19:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 19:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 19:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 19:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 19:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 19:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 20:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 20:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 20:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 20:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 20:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 20:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 20:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 20:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 20:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 20:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 20:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 20:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 20:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 20:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 20:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 20:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 20:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 21:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 21:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 21:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 21:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 21:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 21:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 21:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 21:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 21:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 21:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 21:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 21:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 21:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 21:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 21:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 21:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 21:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 22:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 22:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 22:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 22:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 22:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 22:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 22:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 22:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 22:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 22:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 22:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 22:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 22:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 22:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 22:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 22:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 22:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 23:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 23:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 23:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 23:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 23:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 23:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 23:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 23:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 23:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 23:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 23:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 23:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 23:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 23:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 23:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 23:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 23:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 24:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 24:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 24:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 24:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 24:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 24:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 24:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 24:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 24:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 24:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 24:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 24:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 24:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 24:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 24:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 24:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 24:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 25:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 25:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 25:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 25:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 25:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 25:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 25:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 25:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 25:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 25:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 25:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 25:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 25:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 25:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 25:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 25:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 25:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 26:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 26:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 26:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 26:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 26:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 26:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 26:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 26:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 26:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 26:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 26:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 26:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 26:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 26:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 26:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 26:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 26:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 27:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 27:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 27:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 27:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 27:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 27:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 27:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 27:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 27:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 27:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 27:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 27:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 27:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 27:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 27:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 27:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 27:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 28:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 28:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 28:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 28:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 28:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 28:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 28:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 28:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 28:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 28:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 28:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 28:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 28:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 28:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 28:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 28:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 28:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 29:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 29:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 29:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 29:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 29:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 29:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 29:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 29:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 29:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 29:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 29:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 29:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 29:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 29:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 29:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 29:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 29:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 30:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 30:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 30:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 30:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 30:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 30:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 30:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 30:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 30:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 30:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 30:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 30:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 30:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 30:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 30:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 30:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 30:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 31:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 31:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 31:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 31:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 31:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 31:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 31:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 31:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 31:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 31:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 31:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 31:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 31:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 31:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 31:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 31:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 31:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 32:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 32:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 32:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 32:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 32:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 32:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 32:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 32:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 32:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 32:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 32:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 32:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 32:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 32:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 32:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 32:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 32:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 33:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 33:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 33:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 33:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 33:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 33:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 33:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 33:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 33:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 33:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 33:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 33:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 33:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 33:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 33:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 33:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 33:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 34:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 34:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 34:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 34:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 34:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 34:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 34:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 34:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 34:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 34:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 34:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 34:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 34:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 34:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 34:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 34:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 34:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 35:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 35:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 35:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 35:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 35:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 35:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 35:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 35:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 35:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 35:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 35:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 35:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 35:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 35:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 35:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 35:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 35:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 36:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 36:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 36:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 36:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 36:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 36:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 36:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 36:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 36:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 36:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 36:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 36:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 36:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 36:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 36:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 36:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 36:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 37:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 37:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 37:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 37:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 37:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 37:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 37:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 37:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 37:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 37:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 37:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 37:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 37:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 37:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 37:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 37:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 37:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 38:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 38:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 38:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 38:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 38:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 38:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 38:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 38:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 38:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 38:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 38:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 38:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 38:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 38:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 38:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 38:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 38:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 39:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 39:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 39:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 39:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 39:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 39:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 39:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 39:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 39:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 39:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 39:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 39:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 39:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 39:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 39:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 39:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 39:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 40:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 40:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 40:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 40:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 40:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 40:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 40:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 40:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 40:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 40:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 40:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 40:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 40:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 40:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 40:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 40:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 40:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 41:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 41:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 41:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 41:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 41:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 41:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 41:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 41:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 41:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 41:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 41:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 41:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 41:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 41:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 41:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 41:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 41:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 42:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 42:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 42:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 42:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 42:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 42:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 42:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 42:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 42:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 42:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 42:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 42:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 42:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 42:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 42:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 42:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 42:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 43:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 43:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 43:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 43:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 43:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 43:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 43:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 43:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 43:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 43:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 43:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 43:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 43:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 43:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 43:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 43:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 43:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 44:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 44:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 44:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 44:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 44:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 44:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 44:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 44:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 44:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 44:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 44:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 44:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 44:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 44:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 44:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 44:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 44:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 45:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 45:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 45:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 45:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 45:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 45:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 45:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 45:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 45:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 45:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 45:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 45:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 45:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 45:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 45:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 45:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 45:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 46:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 46:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 46:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 46:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 46:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 46:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 46:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 46:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 46:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 46:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 46:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 46:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 46:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 46:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 46:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 46:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 46:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 47:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 47:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 47:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 47:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 47:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 47:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 47:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 47:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 47:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 47:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 47:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 47:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 47:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 47:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 47:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 47:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 47:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 48:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 48:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 48:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 48:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 48:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 48:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 48:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 48:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 48:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 48:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 48:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 48:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 48:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 48:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 48:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 48:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 48:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 49:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 49:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 49:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 49:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 49:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 49:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 49:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 49:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 49:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 49:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 49:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 49:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 49:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 49:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 49:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 49:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 49:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 50:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 50:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 50:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 50:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 50:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 50:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 50:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 50:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 50:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 50:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 50:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 50:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 50:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 50:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 50:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 50:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 50:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 51:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 51:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 51:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 51:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 51:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 51:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 51:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 51:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 51:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 51:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 51:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 51:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 51:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 51:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 51:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 51:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 51:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 52:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 52:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 52:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 52:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 52:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 52:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 52:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 52:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 52:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 52:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 52:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 52:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 52:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 52:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 52:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 52:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 52:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 53:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 53:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 53:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 53:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 53:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 53:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 53:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 53:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 53:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 53:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 53:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 53:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 53:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 53:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 53:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 53:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 53:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 54:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 54:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 54:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 54:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 54:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 54:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 54:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 54:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 54:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 54:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 54:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 54:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 54:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 54:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 54:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 54:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 54:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 55:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 55:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 55:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 55:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 55:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 55:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 55:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 55:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 55:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 55:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 55:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 55:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 55:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 55:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 55:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 55:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 55:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 56:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 56:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 56:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 56:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 56:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 56:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 56:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 56:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 56:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 56:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 56:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 56:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 56:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 56:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 56:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 56:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 56:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 57:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 57:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 57:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 57:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 57:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 57:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 57:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 57:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 57:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 57:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 57:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 57:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 57:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 57:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 57:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 57:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 57:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 58:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 58:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 58:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 58:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 58:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 58:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 58:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 58:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 58:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 58:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 58:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 58:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 58:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 58:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 58:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 58:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 58:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 59:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 59:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 59:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 59:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 59:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 59:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 59:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 59:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 59:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 59:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 59:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 59:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 59:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 59:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 59:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 59:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 59:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 60:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 60:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 60:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 60:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 60:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 60:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 60:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 60:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 60:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 60:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 60:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 60:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 60:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 60:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 60:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 60:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 60:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 61:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 61:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 61:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 61:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 61:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 61:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 61:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 61:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 61:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 61:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 61:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 61:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 61:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 61:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 61:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 61:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 61:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 62:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 62:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 62:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 62:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 62:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 62:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 62:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 62:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 62:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 62:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 62:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 62:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 62:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 62:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 62:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 62:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 62:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 63:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 63:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 63:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 63:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 63:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 63:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 63:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 63:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 63:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 63:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 63:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 63:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 63:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 63:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 63:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 63:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 63:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 64:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 64:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 64:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 64:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 64:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 64:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 64:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 64:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 64:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 64:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 64:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 64:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 64:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 64:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 64:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 64:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 64:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 65:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 65:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 65:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 65:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 65:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 65:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 65:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 65:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 65:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 65:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 65:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 65:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 65:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 65:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 65:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 65:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 65:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 66:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 66:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 66:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 66:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 66:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 66:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 66:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 66:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 66:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 66:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 66:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 66:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 66:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 66:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 66:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 66:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 66:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 67:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 67:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 67:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 67:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 67:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 67:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 67:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 67:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 67:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 67:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 67:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 67:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 67:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 67:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 67:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 67:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 67:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 68:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 68:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 68:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 68:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 68:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 68:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 68:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 68:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 68:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 68:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 68:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 68:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 68:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 68:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 68:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 68:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 68:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 69:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 69:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 69:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 69:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 69:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 69:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 69:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 69:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 69:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 69:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 69:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 69:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 69:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 69:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 69:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 69:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 69:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 70:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 70:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 70:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 70:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 70:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 70:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 70:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 70:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 70:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 70:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 70:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 70:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 70:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 70:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 70:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 70:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 70:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 71:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 71:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 71:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 71:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 71:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 71:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 71:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 71:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 71:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 71:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 71:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 71:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 71:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 71:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 71:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 71:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 71:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 72:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 72:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 72:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 72:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 72:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 72:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 72:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 72:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 72:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 72:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 72:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 72:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 72:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 72:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 72:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 72:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 72:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 73:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 73:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 73:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 73:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 73:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 73:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 73:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 73:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 73:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 73:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 73:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 73:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 73:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 73:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 73:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 73:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 73:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 74:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 74:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 74:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 74:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 74:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 74:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 74:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 74:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 74:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 74:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 74:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 74:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 74:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 74:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 74:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 74:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 74:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 75:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 75:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 75:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 75:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 75:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 75:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 75:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 75:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 75:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 75:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 75:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 75:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 75:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 75:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 75:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 75:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 75:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 76:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 76:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 76:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 76:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 76:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 76:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 76:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 76:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 76:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 76:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 76:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 76:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 76:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 76:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 76:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 76:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 76:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 77:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 77:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 77:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 77:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 77:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 77:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 77:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 77:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 77:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 77:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 77:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 77:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 77:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 77:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 77:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 77:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 77:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 78:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 78:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 78:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 78:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 78:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 78:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 78:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 78:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 78:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 78:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 78:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 78:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 78:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 78:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 78:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 78:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 78:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 79:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 79:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 79:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 79:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 79:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 79:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 79:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 79:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 79:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 79:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 79:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 79:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 79:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 79:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 79:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 79:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 79:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 80:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 80:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 80:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 80:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 80:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 80:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 80:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 80:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 80:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 80:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 80:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 80:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 80:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 80:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 80:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 80:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 80:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 81:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 81:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 81:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 81:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 81:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 81:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 81:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 81:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 81:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 81:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 81:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 81:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 81:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 81:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 81:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 81:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 81:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 82:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 82:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 82:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 82:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 82:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 82:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 82:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 82:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 82:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 82:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 82:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 82:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 82:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 82:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 82:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 82:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 82:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 83:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 83:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 83:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 83:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 83:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 83:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 83:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 83:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 83:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 83:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 83:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 83:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 83:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 83:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 83:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 83:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 83:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 84:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 84:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 84:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 84:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 84:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 84:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 84:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 84:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 84:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 84:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 84:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 84:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 84:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 84:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 84:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 84:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 84:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 85:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 85:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 85:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 85:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 85:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 85:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 85:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 85:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 85:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 85:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 85:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 85:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 85:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 85:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 85:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 85:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 85:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 86:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 86:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 86:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 86:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 86:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 86:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 86:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 86:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 86:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 86:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 86:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 86:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 86:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 86:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 86:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 86:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 86:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 87:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 87:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 87:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 87:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 87:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 87:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 87:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 87:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 87:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 87:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 87:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 87:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 87:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 87:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 87:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 87:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 87:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 88:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 88:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 88:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 88:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 88:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 88:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 88:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 88:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 88:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 88:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 88:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 88:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 88:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 88:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 88:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 88:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 88:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 89:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 89:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 89:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 89:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 89:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 89:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 89:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 89:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 89:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 89:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 89:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 89:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 89:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 89:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 89:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 89:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 89:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 90:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 90:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 90:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 90:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 90:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 90:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 90:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 90:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 90:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 90:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 90:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 90:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 90:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 90:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 90:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 90:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 90:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 91:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 91:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 91:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 91:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 91:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 91:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 91:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 91:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 91:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 91:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 91:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 91:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 91:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 91:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 91:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 91:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 91:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 92:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 92:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 92:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 92:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 92:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 92:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 92:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 92:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 92:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 92:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 92:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 92:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 92:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 92:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 92:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 92:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 92:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 93:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 93:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 93:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 93:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 93:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 93:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 93:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 93:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 93:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 93:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 93:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 93:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 93:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 93:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 93:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 93:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 93:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 94:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 94:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 94:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 94:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 94:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 94:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 94:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 94:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 94:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 94:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 94:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 94:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 94:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 94:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 94:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 94:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 94:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 95:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 95:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 95:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 95:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 95:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 95:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 95:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 95:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 95:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 95:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 95:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 95:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 95:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 95:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 95:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 95:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 95:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 96:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 96:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 96:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 96:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 96:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 96:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 96:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 96:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 96:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 96:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 96:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 96:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 96:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 96:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 96:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 96:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 96:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 97:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 97:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 97:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 97:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 97:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 97:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 97:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 97:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 97:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 97:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 97:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 97:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 97:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 97:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 97:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 97:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 97:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 98:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 98:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 98:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 98:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 98:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 98:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 98:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 98:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 98:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 98:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 98:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 98:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 98:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 98:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 98:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 98:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 98:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 99:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 99:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 99:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 99:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 99:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 99:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 99:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 99:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 99:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 99:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 99:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 99:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 99:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 99:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 99:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 99:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 99:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 100:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 100:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 100:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 100:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 100:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 100:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 100:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 100:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 100:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 100:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 100:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 100:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 100:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 100:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 100:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 100:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 100:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 101:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 101:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 101:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 101:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 101:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 101:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 101:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 101:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 101:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 101:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 101:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 101:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 101:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 101:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 101:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 101:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 101:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 102:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 102:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 102:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 102:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 102:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 102:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 102:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 102:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 102:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 102:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 102:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 102:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 102:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 102:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 102:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 102:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 102:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 103:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 103:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 103:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 103:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 103:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 103:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 103:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 103:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 103:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 103:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 103:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 103:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 103:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 103:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 103:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 103:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 103:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 104:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 104:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 104:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 104:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 104:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 104:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 104:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 104:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 104:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 104:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 104:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 104:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 104:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 104:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 104:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 104:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 104:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 105:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 105:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 105:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 105:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 105:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 105:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 105:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 105:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 105:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 105:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 105:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 105:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 105:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 105:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 105:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 105:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 105:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 106:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 106:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 106:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 106:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 106:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 106:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 106:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 106:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 106:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 106:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 106:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 106:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 106:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 106:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 106:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 106:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 106:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 107:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 107:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 107:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 107:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 107:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 107:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 107:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 107:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 107:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 107:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 107:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 107:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 107:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 107:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 107:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 107:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 107:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 108:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 108:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 108:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 108:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 108:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 108:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 108:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 108:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 108:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 108:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 108:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 108:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 108:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 108:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 108:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 108:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 108:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 109:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 109:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 109:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 109:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 109:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 109:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 109:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 109:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 109:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 109:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 109:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 109:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 109:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 109:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 109:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 109:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 109:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 110:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 110:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 110:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 110:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 110:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 110:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 110:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 110:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 110:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 110:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 110:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 110:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 110:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 110:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 110:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 110:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 110:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 111:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 111:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 111:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 111:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 111:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 111:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 111:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 111:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 111:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 111:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 111:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 111:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 111:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 111:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 111:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 111:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 111:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 112:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 112:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 112:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 112:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 112:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 112:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 112:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 112:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 112:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 112:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 112:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 112:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 112:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 112:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 112:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 112:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 112:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 113:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 113:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 113:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 113:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 113:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 113:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 113:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 113:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 113:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 113:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 113:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 113:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 113:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 113:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 113:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 113:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 113:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 114:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 114:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 114:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 114:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 114:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 114:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 114:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 114:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 114:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 114:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 114:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 114:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 114:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 114:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 114:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 114:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 114:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 115:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 115:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 115:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 115:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 115:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 115:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 115:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 115:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 115:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 115:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 115:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 115:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 115:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 115:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 115:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 115:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 115:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 116:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 116:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 116:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 116:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 116:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 116:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 116:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 116:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 116:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 116:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 116:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 116:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 116:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 116:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 116:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 116:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 116:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 117:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 117:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 117:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 117:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 117:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 117:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 117:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 117:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 117:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 117:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 117:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 117:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 117:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 117:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 117:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 117:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 117:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 118:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 118:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 118:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 118:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 118:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 118:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 118:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 118:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 118:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 118:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 118:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 118:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 118:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 118:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 118:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 118:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 118:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 119:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 119:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 119:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 119:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 119:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 119:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 119:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 119:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 119:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 119:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 119:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 119:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 119:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 119:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 119:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 119:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 119:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 120:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 120:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 120:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 120:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 120:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 120:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 120:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 120:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 120:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 120:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 120:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 120:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 120:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 120:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 120:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 120:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 120:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 121:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 121:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 121:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 121:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 121:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 121:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 121:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 121:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 121:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 121:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 121:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 121:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 121:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 121:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 121:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 121:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 121:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 122:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 122:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 122:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 122:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 122:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 122:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 122:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 122:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 122:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 122:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 122:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 122:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 122:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 122:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 122:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 122:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 122:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 123:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 123:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 123:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 123:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 123:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 123:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 123:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 123:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 123:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 123:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 123:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 123:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 123:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 123:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 123:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 123:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 123:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 124:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 124:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 124:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 124:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 124:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 124:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 124:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 124:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 124:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 124:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 124:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 124:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 124:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 124:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 124:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 124:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 124:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 125:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 125:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 125:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 125:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 125:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 125:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 125:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 125:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 125:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 125:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 125:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 125:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 125:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 125:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 125:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 125:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 125:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 126:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 126:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 126:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 126:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 126:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 126:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 126:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 126:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 126:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 126:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 126:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 126:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 126:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 126:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 126:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 126:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 126:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 127:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 127:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 127:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 127:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 127:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 127:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 127:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 127:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 127:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 127:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 127:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 127:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 127:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 127:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 127:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 127:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 127:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 128:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 128:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 128:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 128:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 128:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 128:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 128:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 128:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 128:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 128:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 128:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 128:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 128:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 128:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 128:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 128:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 128:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 129:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 129:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 129:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 129:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 129:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 129:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 129:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 129:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 129:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 129:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 129:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 129:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 129:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 129:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 129:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 129:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 129:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 130:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 130:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 130:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 130:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 130:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 130:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 130:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 130:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 130:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 130:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 130:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 130:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 130:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 130:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 130:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 130:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 130:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 131:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 131:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 131:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 131:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 131:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 131:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 131:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 131:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 131:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 131:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 131:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 131:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 131:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 131:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 131:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 131:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 131:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 132:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 132:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 132:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 132:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 132:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 132:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 132:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 132:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 132:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 132:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 132:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 132:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 132:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 132:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 132:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 132:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 132:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 133:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 133:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 133:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 133:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 133:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 133:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 133:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 133:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 133:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 133:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 133:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 133:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 133:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 133:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 133:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 133:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 133:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 134:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 134:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 134:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 134:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 134:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 134:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 134:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 134:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 134:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 134:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 134:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 134:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 134:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 134:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 134:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 134:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 134:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 135:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 135:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 135:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 135:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 135:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 135:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 135:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 135:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 135:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 135:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 135:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 135:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 135:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 135:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 135:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 135:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 135:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 136:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 136:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 136:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 136:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 136:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 136:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 136:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 136:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 136:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 136:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 136:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 136:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 136:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 136:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 136:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 136:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 136:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 137:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 137:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 137:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 137:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 137:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 137:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 137:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 137:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 137:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 137:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 137:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 137:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 137:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 137:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 137:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 137:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 137:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 138:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 138:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 138:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 138:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 138:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 138:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 138:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 138:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 138:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 138:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 138:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 138:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 138:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 138:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 138:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 138:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 138:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 139:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 139:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 139:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 139:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 139:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 139:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 139:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 139:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 139:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 139:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 139:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 139:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 139:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 139:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 139:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 139:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 139:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 140:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 140:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 140:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 140:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 140:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 140:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 140:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 140:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 140:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 140:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 140:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 140:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 140:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 140:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 140:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 140:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 140:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 141:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 141:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 141:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 141:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 141:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 141:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 141:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 141:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 141:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 141:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 141:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 141:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 141:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 141:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 141:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 141:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 141:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 0, Frame 142:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 142:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 1

Thread 0, Frame 142:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 142:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 142:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 142:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED3F0
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 142:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 142:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 142:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 142:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 142:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 142:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 142:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 142:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 142:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 142:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 142:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 0, Frame 143:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 143:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED2D0
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 2

Thread 0, Frame 143:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB108
        pFences[0]:                     const VkFence = 000001DC11139B00

Thread 0, Frame 143:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 143:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 143:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AED630
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 143:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 143:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 143:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 143:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 143:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 143:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA8
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC11137648
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 143:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 143:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 143:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC11107670

Thread 0, Frame 143:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED2D0
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE8
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC11107670
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEECB0
    fence:                          VkFence = 000001DC11139B00

Thread 0, Frame 143:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEECB0
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 0, Frame 144:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 144:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    swapchain:                      VkSwapchainKHR = 000001DC10AFD7A0
    timeout:                        uint64_t = 18446744073709551615
    semaphore:                      VkSemaphore = 000001DC10AED750
    fence:                          VkFence = 0000000000000000
    pImageIndex:                    uint32_t* = 0

Thread 0, Frame 144:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DC0E6A2F90
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000001DC10CEB100
        pFences[0]:                     const VkFence = 000001DC11138A00

Thread 0, Frame 144:
vkResetCommandBuffer(commandBuffer, flags) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    flags:                          VkCommandBufferResetFlags = 0

Thread 0, Frame 144:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000003EB7EFF480:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 144:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000003EB7EFF4A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001DC0BC1D370
        framebuffer:                    VkFramebuffer = 000001DC10AEEB90
        renderArea:                     VkRect2D = 0000003EB7EFF4C0:
            offset:                         VkOffset2D = 0000003EB7EFF4C0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF4C8:
                width:                          uint32_t = 800
                height:                         uint32_t = 600
        clearValueCount:                uint32_t = 2
        pClearValues:                   const VkClearValue* = 0000003EB7EFF508
            pClearValues[0]:                const VkClearValue = 0000003EB7EFF508 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF508 (Union):
                    float32:                        float[4] = 0000003EB7EFF508
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 0000003EB7EFF508
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 0000003EB7EFF508
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF508:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
            pClearValues[1]:                const VkClearValue = 0000003EB7EFF518 (Union):
                color:                          VkClearColorValue = 0000003EB7EFF518 (Union):
                    float32:                        float[4] = 0000003EB7EFF518
                        float32[0]:                     float = 1
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 0000003EB7EFF518
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 0000003EB7EFF518
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 0000003EB7EFF518:
                    depth:                          float = 1
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 144:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001DC1106BFA0

Thread 0, Frame 144:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 0000003EB7EFF530
        pBuffers[0]:                    const VkBuffer = 000001DC0BE11E40
    pOffsets:                       const VkDeviceSize* = 0000003EB7EFF528
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 0, Frame 144:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    buffer:                         VkBuffer = 000001DC10AFCEE0
    offset:                         VkDeviceSize = 0
    indexType:                      VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 144:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 0000003EB7EFF4E0
        pViewports[0]:                  const VkViewport = 0000003EB7EFF4E0:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 800
            height:                         float = 600
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 144:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 0000003EB7EFF4F8
        pScissors[0]:                   const VkRect2D = 0000003EB7EFF4F8:
            offset:                         VkOffset2D = 0000003EB7EFF4F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 0000003EB7EFF500:
                width:                          uint32_t = 800
                height:                         uint32_t = 600

Thread 0, Frame 144:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001DC11063EE0
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000001DC10CEAAA0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001DC111372D0
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 0, Frame 144:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600
    indexCount:                     uint32_t = 2904
    instanceCount:                  uint32_t = 1
    firstIndex:                     uint32_t = 0
    vertexOffset:                   int32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 144:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 144:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DC110CD600

Thread 0, Frame 144:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 0000003EB7EFF5D0
        pSubmits[0]:                    const VkSubmitInfo = 0000003EB7EFF5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 1
            pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF670
                pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AED750
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000003EB7EFF664
                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DC10CEABE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DC110CD600
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 0000003EB7EFF668
                pSignalSemaphores[0]:           const VkSemaphore = 000001DC10AEE050
    fence:                          VkFence = 000001DC11138A00

Thread 0, Frame 144:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DC10EEB630
    pPresentInfo:                   const VkPresentInfoKHR* = 0000003EB7EFF620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 0000003EB7EFF668
            pWaitSemaphores[0]:             const VkSemaphore = 000001DC10AEE050
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 0000003EB7EFF678
            pSwapchains[0]:                 const VkSwapchainKHR = 000001DC10AFD7A0
        pImageIndices:                  const uint32_t* = 0000003EB7EFF660
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

